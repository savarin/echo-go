// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testEchoLogs(t *testing.T) {
	t.Parallel()

	query := EchoLogs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testEchoLogsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EchoLog{}
	if err = randomize.Struct(seed, o, echoLogDBTypes, true, echoLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EchoLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EchoLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEchoLogsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EchoLog{}
	if err = randomize.Struct(seed, o, echoLogDBTypes, true, echoLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EchoLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := EchoLogs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EchoLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEchoLogsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EchoLog{}
	if err = randomize.Struct(seed, o, echoLogDBTypes, true, echoLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EchoLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EchoLogSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EchoLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEchoLogsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EchoLog{}
	if err = randomize.Struct(seed, o, echoLogDBTypes, true, echoLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EchoLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := EchoLogExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if EchoLog exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EchoLogExists to return true, but got false.")
	}
}

func testEchoLogsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EchoLog{}
	if err = randomize.Struct(seed, o, echoLogDBTypes, true, echoLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EchoLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	echoLogFound, err := FindEchoLog(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if echoLogFound == nil {
		t.Error("want a record, got nil")
	}
}

func testEchoLogsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EchoLog{}
	if err = randomize.Struct(seed, o, echoLogDBTypes, true, echoLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EchoLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = EchoLogs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testEchoLogsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EchoLog{}
	if err = randomize.Struct(seed, o, echoLogDBTypes, true, echoLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EchoLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := EchoLogs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEchoLogsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	echoLogOne := &EchoLog{}
	echoLogTwo := &EchoLog{}
	if err = randomize.Struct(seed, echoLogOne, echoLogDBTypes, false, echoLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EchoLog struct: %s", err)
	}
	if err = randomize.Struct(seed, echoLogTwo, echoLogDBTypes, false, echoLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EchoLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = echoLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = echoLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EchoLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEchoLogsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	echoLogOne := &EchoLog{}
	echoLogTwo := &EchoLog{}
	if err = randomize.Struct(seed, echoLogOne, echoLogDBTypes, false, echoLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EchoLog struct: %s", err)
	}
	if err = randomize.Struct(seed, echoLogTwo, echoLogDBTypes, false, echoLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EchoLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = echoLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = echoLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EchoLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func echoLogBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *EchoLog) error {
	*o = EchoLog{}
	return nil
}

func echoLogAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *EchoLog) error {
	*o = EchoLog{}
	return nil
}

func echoLogAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *EchoLog) error {
	*o = EchoLog{}
	return nil
}

func echoLogBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *EchoLog) error {
	*o = EchoLog{}
	return nil
}

func echoLogAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *EchoLog) error {
	*o = EchoLog{}
	return nil
}

func echoLogBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *EchoLog) error {
	*o = EchoLog{}
	return nil
}

func echoLogAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *EchoLog) error {
	*o = EchoLog{}
	return nil
}

func echoLogBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *EchoLog) error {
	*o = EchoLog{}
	return nil
}

func echoLogAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *EchoLog) error {
	*o = EchoLog{}
	return nil
}

func testEchoLogsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &EchoLog{}
	o := &EchoLog{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, echoLogDBTypes, false); err != nil {
		t.Errorf("Unable to randomize EchoLog object: %s", err)
	}

	AddEchoLogHook(boil.BeforeInsertHook, echoLogBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	echoLogBeforeInsertHooks = []EchoLogHook{}

	AddEchoLogHook(boil.AfterInsertHook, echoLogAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	echoLogAfterInsertHooks = []EchoLogHook{}

	AddEchoLogHook(boil.AfterSelectHook, echoLogAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	echoLogAfterSelectHooks = []EchoLogHook{}

	AddEchoLogHook(boil.BeforeUpdateHook, echoLogBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	echoLogBeforeUpdateHooks = []EchoLogHook{}

	AddEchoLogHook(boil.AfterUpdateHook, echoLogAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	echoLogAfterUpdateHooks = []EchoLogHook{}

	AddEchoLogHook(boil.BeforeDeleteHook, echoLogBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	echoLogBeforeDeleteHooks = []EchoLogHook{}

	AddEchoLogHook(boil.AfterDeleteHook, echoLogAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	echoLogAfterDeleteHooks = []EchoLogHook{}

	AddEchoLogHook(boil.BeforeUpsertHook, echoLogBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	echoLogBeforeUpsertHooks = []EchoLogHook{}

	AddEchoLogHook(boil.AfterUpsertHook, echoLogAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	echoLogAfterUpsertHooks = []EchoLogHook{}
}

func testEchoLogsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EchoLog{}
	if err = randomize.Struct(seed, o, echoLogDBTypes, true, echoLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EchoLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EchoLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEchoLogsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EchoLog{}
	if err = randomize.Struct(seed, o, echoLogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EchoLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(echoLogColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := EchoLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEchoLogsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EchoLog{}
	if err = randomize.Struct(seed, o, echoLogDBTypes, true, echoLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EchoLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEchoLogsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EchoLog{}
	if err = randomize.Struct(seed, o, echoLogDBTypes, true, echoLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EchoLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EchoLogSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEchoLogsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EchoLog{}
	if err = randomize.Struct(seed, o, echoLogDBTypes, true, echoLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EchoLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EchoLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	echoLogDBTypes = map[string]string{`ID`: `VARCHAR`, `Message`: `VARCHAR`, `CreatedAt`: `TIMESTAMP`}
	_              = bytes.MinRead
)

func testEchoLogsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(echoLogPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(echoLogAllColumns) == len(echoLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EchoLog{}
	if err = randomize.Struct(seed, o, echoLogDBTypes, true, echoLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EchoLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EchoLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, echoLogDBTypes, true, echoLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EchoLog struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testEchoLogsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(echoLogAllColumns) == len(echoLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EchoLog{}
	if err = randomize.Struct(seed, o, echoLogDBTypes, true, echoLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EchoLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EchoLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, echoLogDBTypes, true, echoLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EchoLog struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(echoLogAllColumns, echoLogPrimaryKeyColumns) {
		fields = echoLogAllColumns
	} else {
		fields = strmangle.SetComplement(
			echoLogAllColumns,
			echoLogPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := EchoLogSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testEchoLogsUpsert(t *testing.T) {
	t.Parallel()
	if len(echoLogAllColumns) == len(echoLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := EchoLog{}
	if err = randomize.Struct(seed, &o, echoLogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EchoLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EchoLog: %s", err)
	}

	count, err := EchoLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, echoLogDBTypes, false, echoLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EchoLog struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EchoLog: %s", err)
	}

	count, err = EchoLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
